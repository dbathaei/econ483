Type = sapply(data, typeof),
stringsAsFactors = FALSE
)
variable_info <- data.frame(
Variables = names(data),
Class = variable_info[,1],
Type = variable_info[,2]
)
half <- nrow(variable_info) %/% 2
part1 <- variable_info[1:half,]
part2 <- variable_info[(half+1):nrow(variable_info),]
kable(head(summary(data[,c(4,8,12,22,25)])), "simple", align = "c",
caption = "Summary statistic for SeatGeek generated scores.")
data <- read.csv("../Week1/SoldOutData.csv")
data <- subset(data,
select = c(
-id,-venue, -type,
-primary_performer,
-performer_2, -date)) # remove irrelevant and row-unique columns.
data <- na.omit(data) # omit NA rows.
# lists to declare each column as its specific type of data.
date_columns <- c("local_date", "announce_date")
numeric_columns <- c("score", "popularity", "venue_score",
"listing_count", "average_price", "lowest_price",
"highest_price", "median_price",
"primary_performer_score", "performer_2_score")
integer_columns <- c("n_performers", "venue_n_upcoming_events",
"primary_performer_event_count", "performer_2_event_count")
factor_columns <- c("country", "region", "segment")
# Define Regions
Northeast <- c("CT", "ME", "MA", "NH", "RI", "VT", "NJ",
"NY", "PA", "NL", "NS", "PE", "NB", "QC")
Midwest <- c("IL", "IN", "MI", "OH", "WI", "IA", "KS",
"MN", "MO", "NE", "ND", "SD", "ON", "MB")
South <- c("DE", "FL", "GA", "MD", "NC", "SC", "VA",
"DC", "WV", "AL", "KY", "MS", "TN", "AR", "LA", "OK", "TX")
West <- c("AZ", "CO", "ID", "MT", "NV", "NM", "UT",
"WY", "AK", "CA", "HI", "OR", "WA", "BC", "YT", "NT", "NU")
# Assign Regions
data$region <- NA
data$region[data$state %in% Northeast] <- "Northeast"
data$region[data$state %in% Midwest] <- "Midwest"
data$region[data$state %in% South] <- "South"
data$region[data$state %in% West] <- "West"
data$region <- as.factor(data$region)
# Delete "state"
data$state <- NULL
data <- na.omit(data)
## convert columns:
for (col in date_columns) {data[[col]] <- as.Date(data[[col]], format="%Y-%m-%dT%H:%M:%S")}
for (col in numeric_columns) {data[[col]] <- as.numeric(data[[col]])}
for (col in integer_columns) {data[[col]] <- as.integer(data[[col]])}
for (col in factor_columns) {data[[col]] <- as.factor(data[[col]])}
data[["sold_out"]] <- as.factor(data[["sold_out"]])
samplevector <- sample(1:nrow(data), 1800)
train_data <- data[samplevector, ]
test_data <- data[-samplevector,]
data[["sold_out"]] <- as.factor(data[["sold_out"]])
samplevector <- sample(1:nrow(data), 1800)
train_data <- data[samplevector, ]
test_data <- data[-samplevector,]
BESTSUBSET <- regsubsets(sold_out ~., data = train_data, nvmax = length(colnames(train_data)))
libs <- c("glmnet", "rpart", "e1071", "nnet",
"randomForest", "boot", "ranger",
"caret", "leaps", "mltools",
"tidyverse", "knitr", "kableExtra", "ggplot2", "rpart.plot")
for (lib in libs){library(lib, character.only = TRUE)}
data <- read.csv("../Week1/SoldOutData.csv")
colnames(data)[colnames(data) == "venue_n_upcoming_events"] <- "v_n_upc_events"
colnames(data)[colnames(data) == "primary_performer_event_count"] <- "prim_perf_event_count"
colnames(data)[colnames(data) == "primary_performer_score"] <- "prim_perf_score"
DCLASS <- sapply(data, class)
variable_info <- data.frame(
Class = sapply(data, class),
Type = sapply(data, typeof),
stringsAsFactors = FALSE
)
variable_info <- data.frame(
Variables = names(data),
Class = variable_info[,1],
Type = variable_info[,2]
)
half <- nrow(variable_info) %/% 2
part1 <- variable_info[1:half,]
part2 <- variable_info[(half+1):nrow(variable_info),]
DCLASS <- sapply(data, class)
variable_info <- data.frame(
Class = sapply(data, class),
Type = sapply(data, typeof),
stringsAsFactors = FALSE
)
variable_info <- data.frame(
Variables = names(data),
Class = variable_info[,1],
Type = variable_info[,2]
)
half <- nrow(variable_info) %/% 2
part1 <- variable_info[1:half,]
part2 <- variable_info[(half+1):nrow(variable_info),]
kable(head(summary(data[,c(4,8,12,22,25)])), "simple", align = "c",
caption = "Summary statistic for SeatGeek generated scores.")
data <- read.csv("../Week1/SoldOutData.csv")
data <- subset(data,
select = c(
-id,-venue, -type,
-primary_performer,
-performer_2, -date)) # remove irrelevant and row-unique columns.
data <- na.omit(data) # omit NA rows.
# lists to declare each column as its specific type of data.
date_columns <- c("local_date", "announce_date")
numeric_columns <- c("score", "popularity", "venue_score",
"listing_count", "average_price", "lowest_price",
"highest_price", "median_price",
"primary_performer_score", "performer_2_score")
integer_columns <- c("n_performers", "venue_n_upcoming_events",
"primary_performer_event_count", "performer_2_event_count")
factor_columns <- c("country", "region", "segment")
# Define Regions
Northeast <- c("CT", "ME", "MA", "NH", "RI", "VT", "NJ",
"NY", "PA", "NL", "NS", "PE", "NB", "QC")
Midwest <- c("IL", "IN", "MI", "OH", "WI", "IA", "KS",
"MN", "MO", "NE", "ND", "SD", "ON", "MB")
South <- c("DE", "FL", "GA", "MD", "NC", "SC", "VA",
"DC", "WV", "AL", "KY", "MS", "TN", "AR", "LA", "OK", "TX")
West <- c("AZ", "CO", "ID", "MT", "NV", "NM", "UT",
"WY", "AK", "CA", "HI", "OR", "WA", "BC", "YT", "NT", "NU")
# Assign Regions
data$region <- NA
data$region[data$state %in% Northeast] <- "Northeast"
data$region[data$state %in% Midwest] <- "Midwest"
data$region[data$state %in% South] <- "South"
data$region[data$state %in% West] <- "West"
data$region <- as.factor(data$region)
# Delete "state"
data$state <- NULL
data <- na.omit(data)
## convert columns:
for (col in date_columns) {data[[col]] <- as.Date(data[[col]], format="%Y-%m-%dT%H:%M:%S")}
for (col in numeric_columns) {data[[col]] <- as.numeric(data[[col]])}
for (col in integer_columns) {data[[col]] <- as.integer(data[[col]])}
for (col in factor_columns) {data[[col]] <- as.factor(data[[col]])}
data[["sold_out"]] <- as.factor(data[["sold_out"]])
samplevector <- sample(1:nrow(data), 1800)
train_data <- data[samplevector, ]
test_data <- data[-samplevector,]
BESTSUBSET <- regsubsets(sold_out ~., data = train_data, nvmax = length(colnames(train_data)))
BSM <- summary(BESTSUBSET)
data.frame(
Adj.R2 = which.max(BSM$adjr2),
CP = which.min(BSM$cp),
BIC = which.min(BSM$bic)
)
par(mfrow = c(1, 3))
plot(BSM$adjr2, main="Adjusted R-Squared",xlab="Number of Variables", ylab="ADJR^2")
plot(BSM$cp, main="C_P",xlab="Number of Variables", ylab="CP")
plot(BSM$bic, main="BIC",xlab="Number of Variables", ylab="BIC")
Adj.R2.index <- which.max(BSM$adjr2)
CP.index <- which.min(BSM$cp)
BIC.index <- which.min(BSM$bic)
BSA <- coef(BESTSUBSET, id = Adj.R2.index)
BSC <- coef(BESTSUBSET, id = CP.index)
BSB <- coef(BESTSUBSET, id = BIC.index)
BSAN <- names(BSA[-1])
BSCN <- names(BSC[-1])
BSBN <- names(BSB[-1])
BSAF <- as.formula(paste("sold_out ~", paste(BSAN, collapse = " + ")))
BSCF <- as.formula(paste("sold_out ~", paste(BSCN, collapse = " + ")))
BSBF <- as.formula(paste("sold_out ~", paste(BSBN, collapse = " + ")))
criteria_list <- list(Adj.R2 = BSAN, Cp = BSCN, BIC = BSBN)
max_vars <- max(sapply(criteria_list, length))
criteria_matrix <- matrix(" ", nrow = max_vars, ncol = length(criteria_list))
for (i in seq_along(criteria_list)) {
criteria_matrix[1:length(criteria_list[[i]]), i] <- criteria_list[[i]]
}
criteria_df <- as.data.frame(criteria_matrix)
colnames(criteria_df) <- names(criteria_list)
kable(criteria_df, caption = "Best selected subsets based on each criterion", align = 'l', "simple")
fold <- 10
CVfold <- trainControl(method="cv", number = fold)
categorical_columns <- c("country", "region", "segment")
dummy_formula <- as.formula(paste("~", paste(categorical_columns, collapse=" + ")))
dummy_vars <- model.matrix(dummy_formula, data = data)[, -1]
prepared_data <- cbind(data[, !(names(data) %in% categorical_columns)], dummy_vars)
trainPrepped <- prepared_data[samplevector, ]
testPrepped <- prepared_data[-samplevector,]
LOGMODEL <- train(sold_out ~ ., data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) # ALL covariates
LOGMODELA <- train(BSAF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #R2
LOGMODELB <- train(BSBF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #BIC
LOGMODELC <- train(BSCF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #Cp
LOGres <- predict(LOGMODEL, newdata = testPrepped)
LOGresA <- predict(LOGMODELA, newdata = testPrepped)
LOGresB <- predict(LOGMODELB, newdata = testPrepped)
LOGresC <- predict(LOGMODELC, newdata = testPrepped)
LOGconf <- confusionMatrix(LOGres, testPrepped$sold_out)
LOGconfA <- confusionMatrix(LOGresA, testPrepped$sold_out)
LOGconfB <- confusionMatrix(LOGresB, testPrepped$sold_out)
LOGconfC <- confusionMatrix(LOGresC, testPrepped$sold_out)
LOGmcc <- mcc(LOGres, testPrepped$sold_out)
LOGmccA <- mcc(LOGresA, testPrepped$sold_out)
LOGmccB <- mcc(LOGresB, testPrepped$sold_out)
LOGmccC <- mcc(LOGresC, testPrepped$sold_out)
prob <- predict(LOGMODEL, newdata = trainPrepped, type = "prob")[,2]
probA <- predict(LOGMODELA, newdata = trainPrepped, type = "prob")[,2]
probB <- predict(LOGMODELB, newdata = trainPrepped, type = "prob")[,2]
probC <- predict(LOGMODELC, newdata = trainPrepped, type = "prob")[,2]
plot_data <- data.frame(score = trainPrepped$score,
All_variables = prob,
Adjr2 = probA,
BIC = probB,
Cp = probC)
plot_data_long <- gather(plot_data, key = "Model", value = "Probability", -score)
ggplot(plot_data_long, aes(x = score, y = 1-Probability, color = Model)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(title = "Graph of Predicted Probabilities",
x = "Score",
y = "Predicted Probability") +
theme_minimal()
LOGmodels <- data.frame(
Model = c("All Variables", "Adjusted R2", "BIC", "Cp"),
MCC = c(LOGmcc, LOGmccA, LOGmccB, LOGmccC)
)
kable(LOGmodels, caption = "MCC for Logistic Models Based on Different Criteria", "latex")
full_tree <- rpart(sold_out ~ ., data = train_data, method = "class")
cp_table <- data.frame(full_tree$cptable)
cp_range <- cp_table[cp_table$CP >= 0.01 & cp_table$CP <= 0.1,]
best_cp <- cp_range[which.min(cp_range$xerror), "CP"]
worst_cp <- cp_range[which(cp_range$nsplit == 3), "CP"]
tune_grid <- data.frame(cp = best_cp)
over_pruned_tree <- prune(full_tree, cp = worst_cp)
TREEMODEL <- train(sold_out ~ ., data = train_data, method = "rpart", trControl = CVfold)
TREEMODELt <- full_tree
TREEres <- predict(TREEMODEL,newdata = test_data)
TREErest <- predict(TREEMODELt,newdata = test_data)
TREEconf <- confusionMatrix(TREEres, test_data$sold_out)
TREEconft <- confusionMatrix(TREErest, test_data$sold_out)
TREErest <- predict(TREEMODELt,newdata = test_data)
TREEconft <- confusionMatrix(TREErest, test_data$sold_out)
TREEmodels <- data.frame(
Model = c("Best Pruned", "Unpruned"),
MCC = c(TREEmcc, TREEmcct)
)
kable(TREEmodels, caption = "MCC for pruned and unpruned Classification Tree models", "latex")
SVMMODEL <- train(sold_out ~ ., data = trainPrepped, method = "svmRadial", trControl = CVfold)
SVMres <- predict(SVMMODEL, newdata = testPrepped)
SVMconf <- confusionMatrix(SVMres, testPrepped$sold_out)
SVMmcc <- mcc(SVMres, test_data$sold_out)
SVMmodels <- data.frame(
Model = c("All Variables"),
MCC = c(SVMmcc)
)
kable(SVMmodels, caption = "MCC for SVM model", "latex")
plot(SVMMODEL)
full_tree <- rpart(sold_out ~ ., data = train_data, method = "class")
TREErest <- predict(full_tree,newdata = test_data)
TREEconft <- confusionMatrix(TREErest, test_data$sold_out)
TREEconf <- confusionMatrix(TREEres, test_data$sold_out)
TREEconf <- confusionMatrix(TREEres, test_data$sold_out)
TREEMODEL <- train(sold_out ~ ., data = train_data, method = "rpart", trControl = CVfold)
TREEMODELt <- train(sold_out ~ ., data = train_data, method = "rpart", trControl = CVfold, tuneGrid = tune_grid)
TREEres <- predict(TREEMODEL,newdata = test_data)
TREErest <- predict(TREEMODELt,newdata = test_data)
TREEconf <- confusionMatrix(TREEres, test_data$sold_out)
TREEconft <- confusionMatrix(TREErest, test_data$sold_out)
TREEmcc <- mcc(TREEres, test_data$sold_out)
TREEmcct <- mcc(TREErest, test_data$sold_out)
TREEmcc
TREEmcct
TREEmodels <- data.frame(
Model = c("Unpruned", "Pruned"),
MCC = c(TREEmcc, TREEmcct)
)
TREEmodels
plot(SVMMODEL)
linear <- lm(as.numeric(sold_out) ~.,data = train_data)
plot(linear)
plot(linear)[1:2]
plot(linear)[1]
a <- plot(linear)
a
plot(linear)
plot(linear)
plot(linear, which = c(1,2))
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
residuals <- resid(linear)
fitteds <- fitted(linear)
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
residuals <- resid(linear)
qqnorm(residuals, ylab="Your Custom Y Label")
qqline(residuals)
title("Normal Q-Q")
qqnorm(residuals, ylab="Your Custom Y Label")
qqline(residuals)
qqnorm(residuals, xlab = "Linear Model", ylab="Standardized Residuals")
qqline(residuals)
qqnorm(residuals, xlab = "Theoretical Quantiles Linear Model", ylab="Standardized Residuals")
qqline(residuals)
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
plot(linear, which = 1)
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
lines(lowess(fitted, residuals), col="red")
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
lines(lowess(fitted, residuals), lwd=2)
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
plot(linear, which = 1)
na_index <- !is.na(residuals) & !is.na(fitted)
plot(fitted[na_index], residuals[na_index], xlab="Your Custom X Label", ylab="Your Custom Y Label")
plot(linear, which = 1)
plot(fitteds, residuals, xlab = "linear model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
linear <- lm(as.numeric(sold_out) ~.,data = train_data)
residuals <- resid(linear)
fitteds <- fitted(linear)
plot(linear, which = 1)
plot(fitteds, residuals, xlab = "Linear Model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
qqnorm(residuals, xlab = "Theoretical Quantiles Linear Model", ylab="Standardized Residuals")
qqline(residuals)
linear <- lm(as.numeric(sold_out) ~.,data = train_data)
residuals <- resid(linear)
fitteds <- fitted(linear)
plot(fitteds, residuals, xlab = "Linear Model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
qqnorm(residuals, xlab = "Theoretical Quantiles Linear Model", ylab="Standardized Residuals")
qqline(residuals)
par(mfrow = c(1,2))
linear <- lm(as.numeric(sold_out) ~.,data = train_data)
residuals <- resid(linear)
fitteds <- fitted(linear)
plot(fitteds, residuals, xlab = "Linear Model Fitted Values", ylab = "Residuals")
abline(h=0,lty=2)
title("Residuals vs Fitted")
qqnorm(residuals, xlab = "Theoretical Quantiles Linear Model", ylab="Standardized Residuals")
qqline(residuals)
par(mfrow = c(1, 1))
plot(LOGMODEL)
a <- glm(sold_out ~ ., data = trainPrepped, family = "binomial")
plot(a)
resid(a)
fitted(a)
plot(fitted(a))
plot(resid(a))
BESTSUBSET <- regsubsets(sold_out ~., data = train_data, nvmax = length(colnames(train_data)))
BSM <- summary(BESTSUBSET)
data.frame(
Adj.R2 = which.max(BSM$adjr2),
CP = which.min(BSM$cp),
BIC = which.min(BSM$bic)
)
BESTSUBSET <- regsubsets(sold_out ~., data = train_data, nvmax = length(colnames(train_data)))
BSM <- summary(BESTSUBSET)
data.frame(
Adj.R2 = which.max(BSM$adjr2),
CP = which.min(BSM$cp),
BIC = which.min(BSM$bic)
)
par(mfrow = c(1, 3))
plot(BSM$adjr2, main="Adjusted R-Squared",xlab="Number of Variables", ylab="ADJR^2")
plot(BSM$cp, main="C_P",xlab="Number of Variables", ylab="CP")
plot(BSM$bic, main="BIC",xlab="Number of Variables", ylab="BIC")
Adj.R2.index <- which.max(BSM$adjr2)
CP.index <- which.min(BSM$cp)
BIC.index <- which.min(BSM$bic)
BSA <- coef(BESTSUBSET, id = Adj.R2.index)
BSC <- coef(BESTSUBSET, id = CP.index)
BSB <- coef(BESTSUBSET, id = BIC.index)
BSAN <- names(BSA[-1])
BSCN <- names(BSC[-1])
BSBN <- names(BSB[-1])
BSAF <- as.formula(paste("sold_out ~", paste(BSAN, collapse = " + ")))
BSCF <- as.formula(paste("sold_out ~", paste(BSCN, collapse = " + ")))
BSBF <- as.formula(paste("sold_out ~", paste(BSBN, collapse = " + ")))
criteria_list <- list(Adj.R2 = BSAN, Cp = BSCN, BIC = BSBN)
max_vars <- max(sapply(criteria_list, length))
criteria_matrix <- matrix(" ", nrow = max_vars, ncol = length(criteria_list))
for (i in seq_along(criteria_list)) {
criteria_matrix[1:length(criteria_list[[i]]), i] <- criteria_list[[i]]
}
criteria_df <- as.data.frame(criteria_matrix)
colnames(criteria_df) <- names(criteria_list)
kable(criteria_df, caption = "Best selected subsets based on each criterion", align = 'l', "simple")
criteria_list <- list(Adj.R2 = BSAN, Cp = BSCN, BIC = BSBN)
max_vars <- max(sapply(criteria_list, length))
criteria_matrix <- matrix(" ", nrow = max_vars, ncol = length(criteria_list))
for (i in seq_along(criteria_list)) {
criteria_matrix[1:length(criteria_list[[i]]), i] <- criteria_list[[i]]
}
criteria_df <- as.data.frame(criteria_matrix)
colnames(criteria_df) <- names(criteria_list)
kable(criteria_df, caption = "Best selected subsets based on each criterion", align = 'l', "simple")
data[["sold_out"]] <- as.factor(data[["sold_out"]])
samplevector <- sample(1:nrow(data), 1800)
train_data <- data[samplevector, ]
test_data <- data[-samplevector,]
BESTSUBSET <- regsubsets(sold_out ~., data = train_data, nvmax = length(colnames(train_data)))
BSM <- summary(BESTSUBSET)
data.frame(
Adj.R2 = which.max(BSM$adjr2),
CP = which.min(BSM$cp),
BIC = which.min(BSM$bic)
)
par(mfrow = c(1, 3))
plot(BSM$adjr2, main="Adjusted R-Squared",xlab="Number of Variables", ylab="ADJR^2")
plot(BSM$cp, main="C_P",xlab="Number of Variables", ylab="CP")
plot(BSM$bic, main="BIC",xlab="Number of Variables", ylab="BIC")
Adj.R2.index <- which.max(BSM$adjr2)
CP.index <- which.min(BSM$cp)
BIC.index <- which.min(BSM$bic)
BSA <- coef(BESTSUBSET, id = Adj.R2.index)
BSC <- coef(BESTSUBSET, id = CP.index)
BSB <- coef(BESTSUBSET, id = BIC.index)
BSAN <- names(BSA[-1])
BSCN <- names(BSC[-1])
BSBN <- names(BSB[-1])
BSAF <- as.formula(paste("sold_out ~", paste(BSAN, collapse = " + ")))
BSCF <- as.formula(paste("sold_out ~", paste(BSCN, collapse = " + ")))
BSBF <- as.formula(paste("sold_out ~", paste(BSBN, collapse = " + ")))
criteria_list <- list(Adj.R2 = BSAN, Cp = BSCN, BIC = BSBN)
max_vars <- max(sapply(criteria_list, length))
criteria_matrix <- matrix(" ", nrow = max_vars, ncol = length(criteria_list))
for (i in seq_along(criteria_list)) {
criteria_matrix[1:length(criteria_list[[i]]), i] <- criteria_list[[i]]
}
criteria_df <- as.data.frame(criteria_matrix)
colnames(criteria_df) <- names(criteria_list)
kable(criteria_df, caption = "Best selected subsets based on each criterion", align = 'l', "simple")
fold <- 10
CVfold <- trainControl(method="cv", number = fold)
categorical_columns <- c("country", "region", "segment")
dummy_formula <- as.formula(paste("~", paste(categorical_columns, collapse=" + ")))
dummy_vars <- model.matrix(dummy_formula, data = data)[, -1]
prepared_data <- cbind(data[, !(names(data) %in% categorical_columns)], dummy_vars)
trainPrepped <- prepared_data[samplevector, ]
testPrepped <- prepared_data[-samplevector,]
a <- glm(sold_out ~ ., data = trainPrepped, family = "binomial")
LOGMODEL <- train(sold_out ~ ., data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) # ALL covariates
LOGMODELA <- train(BSAF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #R2
LOGMODELB <- train(BSBF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #BIC
LOGMODELC <- train(BSCF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #Cp
LOGres <- predict(LOGMODEL, newdata = testPrepped)
LOGresA <- predict(LOGMODELA, newdata = testPrepped)
LOGresB <- predict(LOGMODELB, newdata = testPrepped)
LOGresC <- predict(LOGMODELC, newdata = testPrepped)
LOGconf <- confusionMatrix(LOGres, testPrepped$sold_out)
LOGconfA <- confusionMatrix(LOGresA, testPrepped$sold_out)
LOGconfB <- confusionMatrix(LOGresB, testPrepped$sold_out)
LOGconfC <- confusionMatrix(LOGresC, testPrepped$sold_out)
LOGmcc <- mcc(LOGres, testPrepped$sold_out)
LOGmccA <- mcc(LOGresA, testPrepped$sold_out)
LOGmccB <- mcc(LOGresB, testPrepped$sold_out)
LOGmccC <- mcc(LOGresC, testPrepped$sold_out)=
LOGMODEL <- train(sold_out ~ ., data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) # ALL covariates
LOGMODELA <- train(BSAF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #R2
LOGMODELB <- train(BSBF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #BIC
LOGMODELC <- train(BSCF, data = trainPrepped, method = "glm",
family = "binomial", trControl = CVfold) #Cp
LOGres <- predict(LOGMODEL, newdata = testPrepped)
LOGresA <- predict(LOGMODELA, newdata = testPrepped)
LOGresB <- predict(LOGMODELB, newdata = testPrepped)
LOGresC <- predict(LOGMODELC, newdata = testPrepped)
LOGconf <- confusionMatrix(LOGres, testPrepped$sold_out)
LOGconfA <- confusionMatrix(LOGresA, testPrepped$sold_out)
LOGconfB <- confusionMatrix(LOGresB, testPrepped$sold_out)
LOGconfC <- confusionMatrix(LOGresC, testPrepped$sold_out)
LOGmcc <- mcc(LOGres, testPrepped$sold_out)
LOGmccA <- mcc(LOGresA, testPrepped$sold_out)
LOGmccB <- mcc(LOGresB, testPrepped$sold_out)
LOGmccC <- mcc(LOGresC, testPrepped$sold_out)
prob <- predict(LOGMODEL, newdata = trainPrepped, type = "prob")[,2]
probA <- predict(LOGMODELA, newdata = trainPrepped, type = "prob")[,2]
probB <- predict(LOGMODELB, newdata = trainPrepped, type = "prob")[,2]
probC <- predict(LOGMODELC, newdata = trainPrepped, type = "prob")[,2]
plot_data <- data.frame(score = trainPrepped$score,
All_variables = prob,
Adjr2 = probA,
BIC = probB,
Cp = probC)
plot_data_long <- gather(plot_data, key = "Model", value = "Probability", -score)
ggplot(plot_data_long, aes(x = score, y = 1-Probability, color = Model)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(title = "Graph of Predicted Probabilities",
x = "Score",
y = "Predicted Probability") +
theme_minimal()
